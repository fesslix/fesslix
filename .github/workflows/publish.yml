name: Build and publish Fesslix as Python module


on:
  ## =======================
  ## Execute after each push
  ## =======================
  # Trigger the workflow on push and pull request events to the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  ## =======================
  ## Execute commiting a tag
  ## =======================  
  #push:
  #  tags:
  #    - 'v*'  # Trigger only on version tags

jobs:
  build:
    # Run this job on multiple operating systems (Linux, Windows, macOS)
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-14, macos-13 ]  # List of OS to build on »  ubuntu-latest, windows-latest, macos-14, macos-13
        ## do not use » , macos-latest

    permissions:
      id-token: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4  # Get the code from the repository

    - name: Set up QEMU ## for aarch64
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
          python-version: '3.13' 

    - name: Install Homebrew LLVM (only on macOS-13)
      if: matrix.os == 'macos-13'
      run: |
        brew install llvm

    - name: Set env vars for LLVM (only on macOS-13)
      if: matrix.os == 'macos-13'
      run: |
        echo "CC=/usr/local/opt/llvm/bin/clang" >> $GITHUB_ENV
        echo "CXX=/usr/local/opt/llvm/bin/clang++" >> $GITHUB_ENV
        echo "CMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang" >> $GITHUB_ENV
        echo "CMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++" >> $GITHUB_ENV
        echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
        echo "LDFLAGS=-stdlib=libc++" >> $GITHUB_ENV

    - name: Install Python build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install scikit-build-core pybind11 cmake build 
        pip install twine cibuildwheel

    - name: Build the extension
      run: |
        python -m cibuildwheel --output-dir dist
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-wheels-${{ strategy.job-index }}
        path: dist/

  publish:
    needs: build  # This ensures the upload only runs after the build completes
    runs-on: ubuntu-latest  # Upload step runs on Linux
    permissions:
      id-token: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: python-wheels-*
          merge-multiple: true
          path: dist/
                  
      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        
